using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web.Mvc;
using System.Globalization;
using System.Reflection;
using System.Web.Routing;
using System.Data.Entity;
using SendGrid;
using SendGrid.Helpers.Mail;
using System.Security.Cryptography;
using System.IO;
using System.Diagnostics;
using System.Web.Configuration;
using static NewLetter.Models.storedProcedureModels;
using System.Data.SqlClient;

namespace NewLetter.Models
{
    public class baseClass : oriondbEntities
    {
        #region AutoGenerated Password
        public static string GetRandomPasswordString(int pwdLength)
        {
            int asciiZero;
            int asciiNine;
            int asciiA;
            int asciiZ;
            int count = 0;
            int randNum;
            string randomString;

            System.Random rRandom = new System.Random(System.DateTime.Now.AddMinutes(0).Millisecond);

            asciiZero = 48;
            asciiNine = 57;
            asciiA = 64;
            asciiZ = 90;

            randomString = "";
            while ((count < pwdLength))
            {
                if (count % 2 == 0)
                {
                    randNum = rRandom.Next(asciiZero, asciiNine);
                }
                else
                {
                    randNum = rRandom.Next(asciiA, asciiZ);
                }
                if (((randNum >= asciiZero) && (randNum <= asciiNine)) || ((randNum >= asciiA) && (randNum <= asciiZ)))
                {
                    randomString = (randomString + ((char)(randNum)));
                    count = (count + 1);
                }
            }
            return randomString;
        }
        #endregion
        #region Configuration
        public static string GetWebConfigValue(string Name)
        {
            return System.Configuration.ConfigurationManager.AppSettings[Name].ToString(); ;
        }

        #endregion
        #region Send Mail
        //public static void SendMail(String EmailIDTo, String SubjectText, String Body, String[] attachments = null)
        //{
        //    try
        //    {

        //        string EMAIL_SENT = GetWebConfigValue("EMAIL_SENT");
        //        string COMPANY_EMAIL = GetWebConfigValue("COMPANY_EMAIL");
        //        string COMPANY_EMAIL_PWD = GetWebConfigValue("COMPANY_EMAIL_PWD");
        //        string Host = GetWebConfigValue("Host");

        //        string CC = GetWebConfigValue("CC");
        //        //string BCC = GetWebConfigValue("BCC");

        //        SmtpClient smtpClient = new SmtpClient();
        //        MailMessage message = new MailMessage();
        //        MailAddress fromAddress = new MailAddress(COMPANY_EMAIL, SubjectText);
        //        smtpClient.Host = Host;
        //        smtpClient.Port = 587;
        //        smtpClient.EnableSsl = true;
        //        smtpClient.UseDefaultCredentials = false;
        //        smtpClient.Credentials = new System.Net.NetworkCredential(COMPANY_EMAIL, COMPANY_EMAIL_PWD);

        //        message.From = fromAddress;
        //        message.To.Add(Convert.ToString(EmailIDTo.Trim()));
        //        //message.CC.Add(Convert.ToString(CC));
        //        // message.Bcc.Add(Convert.ToString(BCC));

        //        StringBuilder sb = new StringBuilder();
        //        if (attachments != null)
        //        {
        //            foreach (var item in attachments)
        //            {
        //                if (item != null)
        //                    message.Attachments.Add(new Attachment(item));
        //            }
        //        }
        //        message.Subject = SubjectText;
        //        message.IsBodyHtml = true;
        //        message.Body = Body;// +sb.ToString();
        //        if (EMAIL_SENT == "Y")
        //        {
        //            smtpClient.Send(message);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //}
        #endregion



    }
    public class User
    {
        public int UserID { get; set; }
        public string Name { get; set; }
    }

    public enum AdminInfo
    {
        UserID, FullName, UserPhoto, EmailID, Mobile, role_id, LoginID, IP, Last_Login_Date, latitude, longitude, IPTrackerID,

        SuperAdmin, DataEntryoperator, tktcategory, RoleBit,companyID,employerID,companyname,logo, password,
        Session_Person,socialCheck,emailVerified,mobileVerified
    }


    public class HtmlHelperAutoComplete
    {
        public HtmlHelperAutoComplete()
        {
            this.ControllerName = "Json";
            this.ParmId = "";
            this.Placeholder = "";
        }

        public string Id { get; set; }
        public string hiddenId { get; set; }
        public string Value { get; set; }
        public string ClassName { get; set; }
        public string DbId { get; set; }
        public string dbValue { get; set; }
        public string ControllerName { get; set; }
        public string ActionName { get; set; }
        public string ParmId { get; set; }
        public string Placeholder { get; set; }
        public BaseValidation BaseValidation { get; set; }
    }
    public enum FileType
    {
        PDF,
        DOC,
        TXT,
        CSV,
        XLS,
        XLSX,
        JPG,
        PNG,
        BMP,
    }



    public static class BaseUtil
    {

        private static baseClass db = new baseClass();
        // private static CommonUtil commonUtil = new CommonUtil();
        public static string JobpostOption { get; set; }
        #region Date & Time
        public static String WeekNumber(DateTime dt)
        {

            DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(dt);

            return "Week-" + CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dt, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Sunday);
        }

        public static String WeekNumberStartDate(DateTime dt)
        {

            DayOfWeek day = DayOfWeek.Sunday;
            int diff = dt.DayOfWeek - day;
            if (diff < 0)
            {
                diff += 7;
            }

            return dt.AddDays(-1 * diff).Date.ToString("dd-MMM-yyyy");

        }

        public static DateTime GetCurrentDateTime()
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Now.AddMinutes(diffMinutes);
        }
        public static DateTime GetCalculatedDateTime(int day)
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Now.AddMinutes(diffMinutes).AddDays(day);
        }
        public static DateTime GetTodayDate()
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Today.AddMinutes(diffMinutes).Date;
        }
        
        public static DateTime convertToDate(string str) {
            DateTime dt;

            string dd =  str.Substring(0, 2);
            string mm = str.Substring(3, 2);
            string yy = str.Substring(6, 4);
            string dat = mm + "/" + dd + "/" + yy;
            dt = Convert.ToDateTime(dat);
            return dt;
        }
        #endregion

        #region Configuration
        public static string GetWebConfigValue(string Name)
        {
            return System.Configuration.ConfigurationManager.AppSettings[Name].ToString(); ;
        }

        #endregion

        #region Set Property
        public static void SetProperty(object p, string propName, object value)
        {
            Type t = p.GetType();
            PropertyInfo info = t.GetProperty(propName);
            if (info == null)
                return;
            if (!info.CanWrite)
                return;
            info.SetValue(p, value, null);
        }
        #endregion

        #region Capture Error
        public static void CaptureErrorValues(Exception exception)
        {
            try
            {
                var AppErrorLog = new app_error_log();
                AppErrorLog.ErrorMsg = exception.Message;
                AppErrorLog.datelog = BaseUtil.GetCurrentDateTime();
                if (exception.InnerException != null)
                {
                    AppErrorLog.innerException = exception.InnerException.Message;
                    AppErrorLog.stackTrace = exception.StackTrace;
                }
                db.app_error_log.Add(AppErrorLog);
                db.SaveChanges();
            }
            catch { }           
        }
        public static string GetValidationMessage(ModelStateDictionary modelState)
        {
            string msgResult = "";
            for (int i = 0; i < modelState.ToList().Count; i++)
            {
                if (modelState.ToList()[i].Value.Errors.Count > 0)
                {
                    msgResult += string.Format("{0}~{1};", modelState.ToList()[i].Key.ToString(), modelState.ToList()[i].Value.Errors[0].ErrorMessage);
                }
            }
            return msgResult;
        }
        #endregion

        #region Session
        public static void SetSessionValue(String Key, String Value)
        {
            HttpContext.Current.Session[Key] = Value;
        }
        public static String GetSessionValue(String Key)
        {
            return HttpContext.Current.Session[Key] != null ? HttpContext.Current.Session[Key].ToString() : string.Empty;
        }

        #endregion

        #region Accesible Pages

        public static List<string> AccesiblePages(int UserRole)
        {

            List<string> listAccessilePages = new List<string>();
            try
            {

                var au = (from R in db.roles
                          join RA in db.role_action on R.roleID equals RA.role_id
                          where R.roleID == UserRole
                          select new
                          {
                              ACTION = (RA.controller_name + RA.action_name).ToUpper()
                          }
                          ).ToList();

                foreach (var item1 in au)
                {
                    listAccessilePages.Add(item1.ACTION);
                }

            }


            catch (Exception ex)
            {
                throw ex;
            }
            return listAccessilePages;
        }
        public static List<string> ListControllerExcluded()
        {
            List<string> list = new List<string>() { "BASE", "JSON", "HOME", "ACCOUNT", "JOBDETAILS","EMPLOYER","PROFILE" };
            return list;
        }
      
        /// <summary>
        /// 
        /// </summary>
        /// <param name="filterContext"></param>
        /// <returns></returns>

        public static bool CheckAuthentication(ActionExecutingContext filterContext)
        {
            List<string> accesiblePages = null;
            bool result = false;

            string actionName = filterContext.ActionDescriptor.ActionName;
            string controllerName = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName;
            String Action = string.Format("{0}{1}", controllerName, actionName).ToUpper();

            int UserRole = 0;
            if (IsAuthenticated())
            {
                UserRole = Convert.ToInt32(GetSessionValue(AdminInfo.role_id.ToString()));
            }
            if (accesiblePages == null)
            {
                accesiblePages = AccesiblePages(UserRole);
            }
            foreach (var item in accesiblePages)
            {
                if (Action == item)
                {
                    result = true;
                    break;
                }

            }

            return result;
        }

        #endregion


        public static String CheckUserFrofile(String LoginID, String PWD, string ActionName)
        {
            BaseClass bcs = new BaseClass();

            db = new baseClass();
            String result = "Invalid User Name / Password ";
            if (ActionName == "login")
            {
                var userInfo = db.EmployerDetails.AsEnumerable().Where(U => U.Email == LoginID && U.password == PWD && U.isDelete == false).ToList();

                foreach (var user in userInfo)
                {
                    if (!user.isActive)
                    {
                        result = !user.isActive ? "Your are not authorized to login! Please contact to Admin" : String.Empty;
                    }
                    else if (user.isActive)
                    {
                        string IP = "?";
                        IP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
                        if (IP == "" || IP == null)
                        {
                            IP = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        }
                        Int32 IPTrackerID = 150;// AddUpdateUserTracker(user.UserID, IP, latitude, longitude); 
                        
                        SetSessionValue(AdminInfo.UserID.ToString(), Convert.ToString(user.EmployerID));
                        SetSessionValue(AdminInfo.companyID.ToString(), Convert.ToString(user.companyID));
                        SetSessionValue(AdminInfo.employerID.ToString(), Convert.ToString(user.EmployerID));
                        SetSessionValue(AdminInfo.LoginID.ToString(), Convert.ToString(user.Email));
                        SetSessionValue(AdminInfo.Mobile.ToString(), Convert.ToString(user.Mobile));
                        SetSessionValue(AdminInfo.role_id.ToString(), Convert.ToString(user.roleID));
                        SetSessionValue(AdminInfo.FullName.ToString(), Convert.ToString(user.Name));
                        string encr = BaseUtil.encrypt(user.password);
                        SetSessionValue(AdminInfo.password.ToString(), encr);
                        SetSessionValue(AdminInfo.IP.ToString(), IP);
                        SetSessionValue(AdminInfo.IPTrackerID.ToString(), Convert.ToString(IPTrackerID));
                        var companyinfo = db.companyDetails.Where(c => c.companyID == user.companyID).FirstOrDefault();
                        var companyName = companyinfo.companyName;
                        var companylogo = companyinfo.logo;
                        SetSessionValue(AdminInfo.companyname.ToString(), companyinfo.companyName);
                        SetSessionValue(AdminInfo.logo.ToString(), companyinfo.logo);
                        result = "PASS";
                    }
                    else
                    {
                        result = !user.isActive ? "Your are Inactive! Please contact to Admin" : String.Empty;
                    }
                }
            }
            else
            {

                var userInfo = db.qendidateLists.AsEnumerable().Where(U => U.qenEmail == LoginID && U.password == PWD).ToList();
                foreach (var user in userInfo)
                {
                    if (!user.isActive)
                    {
                        result = !user.isActive ? "Your are not authorized to login! Please contact to Admin" : String.Empty;
                    }
                    else if (user.isActive)
                    {
                        //user.lastLoginTime = BaseUtil.GetCurrentDateTime();
                        //db.Entry(user).State = EntityState.Modified;
                        //db.SaveChanges();
                        string IP = "?";
                        IP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
                        if (IP == "" || IP == null)
                        {
                            IP = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        }
                        Int32 IPTrackerID = 150;// AddUpdateUserTracker(user.UserID, IP, latitude, longitude); 
                        SetSessionValue(AdminInfo.UserID.ToString(), Convert.ToString(user.qenID));
                        SetSessionValue(AdminInfo.LoginID.ToString(), Convert.ToString(user.qenEmail));
                        SetSessionValue(AdminInfo.Mobile.ToString(), Convert.ToString(user.qenPhone));
                        SetSessionValue(AdminInfo.role_id.ToString(), Convert.ToString(user.roleID));
                        //SetSessionValue(AdminInfo.socialCheck.ToString(), Convert.ToString(user.socialCheck));
                        SetSessionValue(AdminInfo.FullName.ToString(), Convert.ToString(user.qenName));
                        SetSessionValue(AdminInfo.IP.ToString(), IP);
                        SetSessionValue(AdminInfo.IPTrackerID.ToString(), Convert.ToString(IPTrackerID));
                        SetSessionValue(AdminInfo.logo.ToString(), Convert.ToString(user.qenImage));                        
                       
                        SetSessionValue(AdminInfo.mobileVerified.ToString(), Convert.ToString(user.isMobileVerified));
                        SetSessionValue(AdminInfo.emailVerified.ToString(), Convert.ToString(user.isEmalVerified));





                        result = "PASS";
                    }
                    else
                    {
                        result = !user.isActive ? "Your are Inactive! Please contact to Admin" : String.Empty;
                    }
                }
            }

            return result;
        }

        public static List<SelectListItem> getYears()
        {
            List<SelectListItem> years = new List<SelectListItem>();
            int startYear = Convert.ToInt16(WebConfigurationManager.AppSettings["qenStartYear"]);
            int endYear = BaseUtil.GetCurrentDateTime().Year;
            
            for(int i = startYear; i<= endYear; i++)
                {
               
                years.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString(),
                });
                }
            return years;

        }

        public static List<SelectListItem> getGradeOrPercentage()
        {
            List<SelectListItem> gradeOrPercentage = new List<SelectListItem>();
            gradeOrPercentage.Add(new SelectListItem
            {
                Text = "Distinction  | A+ [80% -    ]",
                Value = "Distinction  | A+ [80% -    ]",
            });
            gradeOrPercentage.Add(new SelectListItem
            {
                Text = "First Class  | A  [60% -79% ]",
                Value = "First Class  | A  [60% -79% ]",
            });
            gradeOrPercentage.Add(new SelectListItem
            {
                Text = "Second Class | B[40 % -59 %]",
                Value = "Second Class | B  [40% - 59%]",
            });
            gradeOrPercentage.Add(new SelectListItem
            {
                Text = "Third Class  | C  [33% - 39%]",
                Value = "Third Class  | C  [33% - 39%]",
            });

            return gradeOrPercentage;
        }

        public static List<SelectListItem> getBoardName()
        {
            List<SelectListItem> boardNames = new List<SelectListItem>();
            boardNames.Add(new SelectListItem
            {
                Text = "I.C.S.E.",
                Value = "I.C.S.E.",
            });
            boardNames.Add(new SelectListItem
            {
                Text = "C.B.S.E.",
                Value = "C.B.S.E.",
            });
            boardNames.Add(new SelectListItem
            {
                Text = "N.I.O.S./Open School",
                Value = "N.I.O.S./Open School",
            });
            boardNames.Add(new SelectListItem
            {
                Text = "State Board",
                Value = "State Board",
            });
            return boardNames;

        }

        public static List<SelectListItem> getHigherSecondaryStreams()
        {
            List<SelectListItem> HigherSecondaryStreams = new List<SelectListItem>();
            HigherSecondaryStreams.Add(new SelectListItem
            {
                Text = "Science",
                Value = "Science",
            });
            HigherSecondaryStreams.Add(new SelectListItem
            {
                Text = "Commerce",
                Value = "Commerce",
            });
            HigherSecondaryStreams.Add(new SelectListItem
            {
                Text = "Arts",
                Value = "Arts",
            });

            return HigherSecondaryStreams;       
        }

        public static List<SelectListItem> getMonths()
        {
            List<SelectListItem> months = new List<SelectListItem>();
            months.Add(new SelectListItem
            {
                Text = "January",
                Value = "1"
            });
            months.Add(new SelectListItem
            {
                Text = "February",
                Value = "2"
            });
            months.Add(new SelectListItem
            {
                Text = "March",
                Value = "3"
            });
            months.Add(new SelectListItem
            {
                Text = "April",
                Value = "4"
            });
            months.Add(new SelectListItem
            {
                Text = "May",
                Value = "5"

            });
            months.Add(new SelectListItem
            {
                Text = "June",
                Value = "6"
            });
            months.Add(new SelectListItem
            {
                Text = "July",
                Value = "7"
            });
            months.Add(new SelectListItem
            {
                Text = "August",
                Value = "8"
            });
            months.Add(new SelectListItem
            {
                Text = "September",
                Value = "9"
            });
            months.Add(new SelectListItem
            {
                Text = "October",
                Value = "10"
            });
            months.Add(new SelectListItem
            {
                Text = "November",
                Value = "11"
            });
            months.Add(new SelectListItem
            {
                Text = "December",
                Value = "12"
            });
            return months;
        }


        public static List<SelectListItem> getdates()
        {
            List<SelectListItem> dates = new List<SelectListItem>();
            dates.Add(new SelectListItem
            {
                Text = "1",
                Value = "1"        
            });
            dates.Add(new SelectListItem
            {
                Text = "2",
                Value = "2"
            });
            dates.Add(new SelectListItem
            {
                Text = "3",
                Value = "3"
            });
            dates.Add(new SelectListItem
            {
                Text = "4",
                Value = "4"
            }); dates.Add(new SelectListItem
            {
                Text = "5",
                Value = "5"
            }); dates.Add(new SelectListItem
            {
                Text = "6",
                Value = "6"
            }); dates.Add(new SelectListItem
            {
                Text = "7",
                Value = "7"
            }); dates.Add(new SelectListItem
            {
                Text = "8",
                Value = "8"
            }); dates.Add(new SelectListItem
            {
                Text = "9",
                Value = "9"
            }); dates.Add(new SelectListItem
            {
                Text = "10",
                Value = "10"
            }); dates.Add(new SelectListItem
            {
                Text = "11",
                Value = "11"
            }); dates.Add(new SelectListItem
            {
                Text = "12",
                Value = "12"
            }); dates.Add(new SelectListItem
            {
                Text = "13",
                Value = "13"
            }); dates.Add(new SelectListItem
            {
                Text = "14",
                Value = "14"
            }); dates.Add(new SelectListItem
            {
                Text = "15",
                Value = "15"
            }); dates.Add(new SelectListItem
            {
                Text = "16",
                Value = "16"
            }); dates.Add(new SelectListItem
            {
                Text = "17",
                Value = "17"
            }); dates.Add(new SelectListItem
            {
                Text = "18",
                Value = "18"
            }); dates.Add(new SelectListItem
            {
                Text = "19",
                Value = "19"
            }); dates.Add(new SelectListItem
            {
                Text = "20",
                Value = "20"
            }); dates.Add(new SelectListItem
            {
                Text = "21",
                Value = "21"
            }); dates.Add(new SelectListItem
            {
                Text = "22",
                Value = "22"
            }); dates.Add(new SelectListItem
            {
                Text = "23",
                Value = "23"
            }); dates.Add(new SelectListItem
            {
                Text = "24",
                Value = "24"
            }); dates.Add(new SelectListItem
            {
                Text = "25",
                Value = "25"
            }); dates.Add(new SelectListItem
            {
                Text = "26",
                Value = "26"
            }); dates.Add(new SelectListItem
            {
                Text = "27",
                Value = "27"
            }); dates.Add(new SelectListItem
            {
                Text = "28",
                Value = "28"
            }); dates.Add(new SelectListItem
            {
                Text = "29",
                Value = "29"
            }); dates.Add(new SelectListItem
            {
                Text = "30",
                Value = "30"
            }); dates.Add(new SelectListItem
            {
                Text = "31",
                Value = "31"
            }); 

            return dates;
        }
        


        //for month wise count 
        public static Tuple <int,int,int> ok()
        {
            int viewCount, DownloadCount, contactCount;
            long userID = Convert.ToInt64(BaseUtil.GetSessionValue(AdminInfo.UserID.ToString()));
            var AppliedJob = db.ProfilePerformances.Where(e => e.dataIsCreated.Month == DateTime.Now.Month && e.qenID == userID).OrderByDescending(e => e.dataIsCreated);          
            
            viewCount = AppliedJob.Where(e => e.ViewedDate != null).Count();
            DownloadCount = AppliedJob.Where(e => e.Downloaded != null).Count();
            contactCount = AppliedJob.Where(e => e.Contacted != null).Count();
            return new Tuple<int, int, int> (viewCount, DownloadCount, contactCount);

        }

        // Check matching variables 

        public static int matching_skills(long jobID, long qenID)
        {
            var jobskills = db.jobSkills.Where(e => e.jobID == jobID).Select(e => new { e.skillsID }).ToArray();
            var qenSkills = db.qenSkills.Where(e => e.qenID == qenID).Select(e => new { e.skillsID }).ToArray();
            int j = 0;
            var matchedSkills = jobskills.Intersect(qenSkills).ToArray();
            if (jobskills != null && qenSkills != null && matchedSkills.Count() > 0)
            {
                j = Convert.ToInt16(((Int32)matchedSkills.Count() * 100) / (Int32)jobskills.Count());
            }
            return j;
        }

        public static int CheckUserExists(String EmailID)
        {
            return (from M in db.EmployerDetails.AsEnumerable()
                    where M.Email == EmailID
                    select M).Count();
        }

        public static bool IsAuthenticated()
        {
            return string.IsNullOrEmpty(GetSessionValue(AdminInfo.UserID.ToString())) ? false : true;
        }


        public static string RoleID()
        {
            return Convert.ToString(GetSessionValue(AdminInfo.role_id.ToString()));
        }
        #region Application Path

        static HttpContext Context
        {
            get { return HttpContext.Current; }
        }

        static HttpRequest Request
        {
            get { return Context.Request; }
        }


        public static UrlHelper GetUrlHelper()
        {
            return new UrlHelper(HttpContext.Current.Request.RequestContext);
        }

        public static string GetActionPath(string controllerActionName) //Ex: "Category/Edit"
        {
            return GetApplicationPath(Request.RequestContext) + string.Format("/{0}", controllerActionName);
        }

        public static string GetActionPath(string controllerName, string actionName)
        {
            return GetApplicationPath(Request.RequestContext) + string.Format("/{0}/{1}", controllerName, actionName);
        }

        public static string GetApplicationPath(RequestContext requestContext)
        {
            string retPath;
            string httpOrigin = Request.ServerVariables["HTTP_ORIGIN"];
            string applicationPath = Request.ApplicationPath;
            //Approach #1: OK:Post
            //retPath = (applicationPath == "/" ? httpOrigin : httpOrigin + applicationPath);
            //Approach #2 OK:All
            retPath = string.Format("{0}://{1}", Request.Url.Scheme, Request.Url.Authority) + (applicationPath == "/" ? "" : applicationPath);
            return retPath;
        }

        public static string GetApplicationPath()
        {
            string retPath;
            string applicationPath = Request.ApplicationPath;
            retPath = string.Format("{0}://{1}", Request.Url.Scheme, Request.Url.Authority) + (applicationPath == "/" ? "" : applicationPath);
            return retPath;
        }
        public static string GetLoginID()
        {
            return SessionUtil.GetLoginID();
        }

        public static string GetCurrentController()
        {
            return Convert.ToString(Request.RequestContext.RouteData.Values["controller"]);
        }
        public static string GetCurrentAction()
        {
            return Convert.ToString(Request.RequestContext.RouteData.Values["action"]);
        }

        public static List<string> GetControllerNames()
        {
            List<string> controllerNames = new List<string>();
            GetSubClasses<Controller>().ForEach(
                type => controllerNames.Add(type.Name));
            return controllerNames;
        }

        private static List<Type> GetSubClasses<T>()
        {
            return Assembly.GetCallingAssembly().GetTypes().Where(
                type => type.IsSubclassOf(typeof(T))).ToList();
        }

        public static List<string> GetControllerActionNames(Type t)
        {
            return t.GetMethods().Where(m => m.ReturnType == typeof(ActionResult))
                .Select(m => m.Name).Distinct().ToList();
        }
        public static Type GetType(string typeName)
        {
            var type = Type.GetType(typeName);
            if (type != null) return type;
            foreach (var a in AppDomain.CurrentDomain.GetAssemblies())
            {
                type = a.GetType(typeName);
                if (type != null)
                    return type;
            }
            return null;
        }
        #endregion
        public static string JOb_skillSet(long jobID)
        {
            string selectedskills = string.Empty;
            var ojobSkill = db.jobSkills.Where(e => e.jobID == jobID);
            if (ojobSkill != null)
            {

                foreach (var s in ojobSkill)
                {
                    var skillName_ = db.skills.Where(e => e.skillsID == s.skillsID).Select(x => new { x.skillName }).SingleOrDefault();
                    selectedskills = selectedskills + skillName_.skillName + ",";
                }
            }
            return selectedskills;
        }
        public static string Qen_skillSet(long QenID)
        {
            string selectedskills = string.Empty;
            var ojobSkill = db.qenSkills.Where(e => e.qenID == QenID);
            db.Database.Log = msg => Debug.Write(msg);
            if (ojobSkill != null)
            {

                foreach (var s in ojobSkill)
                {
                    var skillName_ = db.skills.Where(e => e.skillsID == s.skillsID).Select(x => new { x.skillName }).SingleOrDefault();
                    selectedskills = selectedskills + skillName_.skillName + ",";
                }
            }
            return selectedskills;
        }

        public static string SearchSkillStes(string skills)
        {

            string skillsReq = string.Empty;
            List<int> list = new List<int>();
            if (skills != "")
            {

                string[] values = skills.Split(',').Select(sValue => sValue.Trim()).ToArray();
                db.Database.Log = msg => Debug.Write(msg);
                foreach (string s in values)
                {
                    if (s != "")
                    {
                        list.Add(checkValuExist(s));
                    }
                }

                if (list.Count > 0)
                {
                    list.Sort();
                    for (int u = 0; u <= list.Count - 1; u++)
                    {
                        if (u != list.Count - 1)
                        {
                            skillsReq = skillsReq + list[u].ToString() + ",";
                        }
                        else
                        {
                            skillsReq = skillsReq + list[u].ToString();
                        }
                    }

                }
            }
            return skillsReq;
        }

        public struct DateTimeSpan
        {
            private readonly int years;
            private readonly int months;
            private readonly int days;
            private readonly int hours;
            private readonly int minutes;
            private readonly int seconds;
            private readonly int milliseconds;

            public DateTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds)
            {
                this.years = years;
                this.months = months;
                this.days = days;
                this.hours = hours;
                this.minutes = minutes;
                this.seconds = seconds;
                this.milliseconds = milliseconds;
            }

            public int Years { get { return years; } }
            public int Months { get { return months; } }
            public int Days { get { return days; } }
            public int Hours { get { return hours; } }
            public int Minutes { get { return minutes; } }
            public int Seconds { get { return seconds; } }
            public int Milliseconds { get { return milliseconds; } }

            enum Phase { Years, Months, Days, Done }

            public static DateTimeSpan CompareDates(DateTime date1, DateTime date2)
            {
                if (date2 < date1)
                {
                    var sub = date1;
                    date1 = date2;
                    date2 = sub;
                }

                DateTime current = date1;
                int years = 0;
                int months = 0;
                int days = 0;

                Phase phase = Phase.Years;
                DateTimeSpan span = new DateTimeSpan();
                int officialDay = current.Day;

                while (phase != Phase.Done)
                {
                    switch (phase)
                    {
                        case Phase.Years:
                            if (current.AddYears(years + 1) > date2)
                            {
                                phase = Phase.Months;
                                current = current.AddYears(years);
                            }
                            else
                            {
                                years++;
                            }
                            break;
                        case Phase.Months:
                            if (current.AddMonths(months + 1) > date2)
                            {
                                phase = Phase.Days;
                                current = current.AddMonths(months);
                                if (current.Day < officialDay && officialDay <= DateTime.DaysInMonth(current.Year, current.Month))
                                    current = current.AddDays(officialDay - current.Day);
                            }
                            else
                            {
                                months++;
                            }
                            break;
                        case Phase.Days:
                            if (current.AddDays(days + 1) > date2)
                            {
                                current = current.AddDays(days);
                                var timespan = date2 - current;
                                span = new DateTimeSpan(years, months, days, timespan.Hours, timespan.Minutes, timespan.Seconds, timespan.Milliseconds);
                                phase = Phase.Done;
                            }
                            else
                            {
                                days++;
                            }
                            break;
                    }
                }

                return span;
            }
        }

        public static string checkSocialProfile(string email)
        {
            var result = "Profile Exists / Not Exists";
            var user = db.qendidateLists.Where(u => u.qenEmail == email).FirstOrDefault();
            if (user == null)
            {
                result = "NotExists";
            }
            else
            {
                result = "Exists";
            }

            return result;
        }

        public static void Skills(string orequiredSkills, long jobID)
        {
            jobSkill ojobSkill = null;
            if (jobID > 0)
            {
                db.jobSkills.RemoveRange(db.jobSkills.Where(x => x.jobID == jobID));
                string skills = orequiredSkills;
                string[] values = skills.Split(',').Select(sValue => sValue.Trim()).ToArray();
                foreach (string s in values)
                {
                    if (s != "")
                    {
                        ojobSkill = new jobSkill();
                        ojobSkill.jobID = jobID;
                        ojobSkill.skillsID = checkValuExist(s);
                        db.jobSkills.Add(ojobSkill);
                        db.SaveChanges();
                    }
                }
            }
        }

        public static int checkValuExist(string skill_)
        {

            var result = db.skills.Where(e => e.skillName == skill_).Select(x => new { x.skillsID }).SingleOrDefault();
            if (result == null)
            {
                skill oskill = new skill();
                oskill.skillName = skill_;
                db.skills.Add(oskill);
                db.SaveChanges();
                return oskill.skillsID;
            }
            else
            {
                return result.skillsID;
            }
        }
        //Central Method for generating random number

        public static int GenerateRandomNo()
        {
            int _min = 1000;
            int _max = 9999;
            Random _rdm = new Random();
            return _rdm.Next(_min, _max);
        }

        // Cengtral Method for sending OTP
        public static string sendSMS(string msg, string mobile)
        {
            string key = "wjm24kxfg4ntpce";
            string sender_id = "DHVANI";            
            WebRequest request = WebRequest.Create("http://www.smartsmsmarketing.com/sendsmsapi.php?key=" + key + "&sender_id=" + sender_id + "&sendto=" + mobile + "&message=" + msg );          
            WebResponse response = request.GetResponse();
            if (((HttpWebResponse)response).StatusDescription.Equals("OK"))
            {
                return "ok";
            }
            else
            {
                return "not sent";
            }
        }

        // Central Method for sending emails using send grid 

        public static string sendEmailer(string ToEmail, string Mail_Subject, string HTML_Body, string attachment)
        {
            string result = "no";
            var apiKey = db.sendGridDetails.Select(e => e.APIKEY).FirstOrDefault();
            var client = new SendGridClient(apiKey.ToString());
            var from = new EmailAddress("info@qendidate.com", "Qendidate");
            var subject = Mail_Subject;
            var to = new EmailAddress(ToEmail);
            var plainTextContent = "";
            var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, HTML_Body);
            try
            {
                var response = client.SendEmailAsync(msg);
                result = "ok";
            }
            catch (Exception e)
            {
                result = "no";
            }
            HTML_Body = null;

            //MailMessage mail = new MailMessage();
            //mail.To.Add(ToEmail);
            //mail.From = new MailAddress("info@qendidate.com");
            //mail.Subject = Mail_Subject;
            //string Body = HTML_Body;
            //mail.Body = Body;
            //mail.IsBodyHtml = true;
            //SmtpClient smtp = new SmtpClient();
            //smtp.Host = "secure.emailsrvr.com";
            //smtp.Port = 587;
            //smtp.UseDefaultCredentials = false;
            //smtp.Credentials = new System.Net.NetworkCredential(WebConfigurationManager.AppSettings["SMTP_EMAIL_ADDRESS"], WebConfigurationManager.AppSettings["SMTP_EMAIL_PASSWORD"]); // Using web config app settingkeys 
            //smtp.EnableSsl = false;
            //try
            //{
            //    smtp.Send(mail);
            //    return result = "ok";
            //}
            //catch (Exception e)
            //{

            //}

            return result;
        }

        // Central Method for string encryption
        public static string encrypt(string encryptString)
        {
            string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);
            using (System.Security.Cryptography.Aes encryptor = Aes.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
                    0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
                });
                encryptor.Key = pdb.GetBytes(32);
                encryptor.IV = pdb.GetBytes(16);
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(clearBytes, 0, clearBytes.Length);
                        cs.Close();
                    }
                    encryptString = Convert.ToBase64String(ms.ToArray());
                }
            }
            return encryptString;
        }

       

        public static int getProfileCompletePercentage(string qenID)
        {
            var qenID_ = new SqlParameter("@qenID", qenID);
            var result = db.Database.SqlQuery<usp_GetProfileCompletenessPerc_Result>("usp_GetProfileCompletenessPerc @qenID", qenID_).FirstOrDefault();
            return result.perc;
        }
        

        // Central Method for string decryption
        public static string Decrypt(string cipherText)
        {
            string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            cipherText = cipherText.Replace(" ", "+");
            byte[] cipherBytes = Convert.FromBase64String(cipherText);
            using (Aes encryptor = Aes.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
        });
                encryptor.Key = pdb.GetBytes(32);
                encryptor.IV = pdb.GetBytes(16);
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(cipherBytes, 0, cipherBytes.Length);
                        cs.Close();
                        cs.Dispose(); // dispose function added due warning generated
                    }
                    cipherText = Encoding.Unicode.GetString(ms.ToArray());
                    ms.Dispose();
                }
            }
            return cipherText;
        }
    }

    public class HtmlHelperMultiSelect
    {
        public HtmlHelperMultiSelect()
        {
        }
        public HtmlHelperMultiSelect(string Id)
        {
            this.Id = Id;
        }
        public HtmlHelperMultiSelect(string Id, IList<SelectListItem> list, BaseValidation baseValidation)
        {
            this.Id = Id;
            this.List = list;
            this.BaseValidation = baseValidation;
        }
        public string Id { get; set; }
        public IList<SelectListItem> List { get; set; }
        public BaseValidation BaseValidation { get; set; }
        public string SelectedValues { get; set; }
        public string Caption { get; set; }
    }
    public class BaseValidation
    {
        public BaseValidation()
        {

        }
        public BaseValidation(bool isRequired, string requiredText, string validationId = null)
        {
            this.IsRequired = isRequired;
            this.RequiredText = requiredText;
            this.ValidationId = validationId;
        }
        public bool IsRequired { get; set; }
        public string ValidationId { get; set; }
        public string RequiredText { get; set; }
        public HtmlString GetValidationString()
        {
            var vs = "";
            if (this.ValidationId != null)
            {
                string ret = " " + BaseConst.VALIDATION_ISREQUIRED + "='{0}' " + BaseConst.VALIDATION_REQ_MSG + "='{1}' " + BaseConst.VALIDATION_ID + "='{2}' ";
                vs = string.Format(ret, Convert.ToString(this.IsRequired).ToLower(), this.RequiredText, this.ValidationId);
            }
            else
            {
                string ret = " " + BaseConst.VALIDATION_ISREQUIRED + "='{0}' " + BaseConst.VALIDATION_REQ_MSG + "='{1}' ";
                vs = string.Format(ret, Convert.ToString(this.IsRequired).ToLower(), this.RequiredText);
            }
            return new HtmlString(vs);
        }
    }
    public static class BaseConst
    {
        public const string VALIDATION_ISREQUIRED = "data-valc-isrequired";
        public const string VALIDATION_REQ_MSG = "data-valc-required-msg";
        public const string VALIDATION_ID = "data-valc-validation-id";

    }

    public static class SessionUtil
    {
        public static int GetUserID()
        {
            return Convert.ToInt32(BaseUtil.GetSessionValue(AdminInfo.UserID.ToString()));
        }
        public static string GetLoginID()
        {
            return BaseUtil.GetSessionValue(AdminInfo.LoginID.ToString());
        }

    }



    #region WebGrid
    //public static class WebGridBase
    //{
    //    public static WebGrid Init(ParmInGridInit parmIn)
    //    {
    //        WebGrid grid = new WebGrid(null, canPage: parmIn.CanPage, rowsPerPage: parmIn.RowPerPage,
    //        selectionFieldName: "selectedRow", ajaxUpdateContainerId: parmIn.AjaxContainerID);
    //        grid.Pager(WebGridPagerModes.FirstLast);
    //        grid.Bind(parmIn.Source);
    //        return grid;
    //    }
    //    public static IHtmlString GetWebGridHtml(WebGrid grid, WebGridColumn[] columns = null)
    //    {
    //        return grid.GetHtml(tableStyle: "table table-bordered",
    //        headerStyle: "DataGridHeader",
    //        alternatingRowStyle: "DataGridrowb",
    //        rowStyle: "DataGridrowa",
    //        selectedRowStyle: "DataGridHeader",
    //        mode: WebGridPagerModes.FirstLast | WebGridPagerModes.NextPrevious | WebGridPagerModes.Numeric,
    //        firstText: "First", lastText: "Last",
    //        previousText: "Prev", nextText: "Next",
    //        numericLinksCount: 10,
    //        columns: columns);
    //    }
    //}

    //public class ParmInGridInit
    //{
    //    public string AjaxContainerID { get; set; }
    //    public IEnumerable<dynamic> Source { get; set; }
    //    public int RowPerPage { get; set; }
    //    public bool CanPage { get; set; }
    //    public ParmInGridInit()
    //    {
    //        RowPerPage = 50;
    //        CanPage = true;
    //    }
    //}
    #endregion

    public class CustomErrorHandling : HandleErrorAttribute
    {

        public override void OnException(ExceptionContext exceptionContext)
        {
            if (!exceptionContext.ExceptionHandled)
            {
                string controllerName = (string)exceptionContext.RouteData.Values["controller"];
                string actionName = (string)exceptionContext.RouteData.Values["action"];

                Exception custException = new Exception("There is some error");
                 var  db = new baseClass();
              try { 
                var AppErrorLog = new app_error_log();
                AppErrorLog.ErrorMsg = exceptionContext.Exception.Message;
                AppErrorLog.datelog = BaseUtil.GetCurrentDateTime();
                db.app_error_log.Add(AppErrorLog);
                db.SaveChanges();
                }
                catch { }
            var a = exceptionContext.Exception.Message + " in " + controllerName;

                var model = new HandleErrorInfo(custException, controllerName, actionName);

                exceptionContext.Result = new ViewResult
                {
                    ViewName = "~/Views/Shared/Error.cshtml",
                    ViewData = new ViewDataDictionary<HandleErrorInfo>(model),
                    TempData = exceptionContext.Controller.TempData
                };

                exceptionContext.ExceptionHandled = true;

            }
        }
    }
}
