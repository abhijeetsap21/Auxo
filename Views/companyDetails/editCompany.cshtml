@model NewLetter.Models.companyDetail

@{
    ViewBag.Title = "editCompany";
    Layout = "~/Views/Shared/_Layout_Employer.cshtml";
}

<h2>editCompany</h2>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/scripts/tinymce/tinymce.min.js"></script>
@using (Html.BeginForm("editCompany", "companyDetails", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>companyDetail</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      
        @Html.HiddenFor(model => model.companyID)
        @Html.HiddenFor(model => model.logo)


        @{ if (Model.logo == "" || Model.logo == null)
            {
                <img id="pic" src='~/Logo/EmptyLogo.jpg' alt="company logo" width="100px" height="100px" />
            }
            else
            {
                <img id="pic" src='@Model.logo' alt="company logo" width="100px" height="100px" />
            }
        }

        <input type="file" id="photoA" name="files">
        <div class="form-group">
            @Html.LabelFor(model => model.companyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.companyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.companyName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.website, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.website, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.website, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.companyIndustry, "companyIndustry", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("companyIndustry", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.companyIndustry, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.companyDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.companyDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.companyDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gstNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gstNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gstNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.tinNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.tinNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tinNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ctsNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ctsNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ctsNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.city, new { id = "locality", placeholder = "City" , @class = "form-control" })<i class="glyphicon glyphicon-map-marker" data-toggle="tooltip" title="find current location" onclick="return codeLatLng();"></i>
                
                    @Html.ValidationMessageFor(model => model.city, "", new { @class = "col_1 tleft text-danger" })
                </div>
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.streetNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.streetNo, new { id = "street_number", placeholder = "street no", maxlength = "20", @class = "form-control" })               
                    @Html.ValidationMessageFor(model => model.streetNo, "", new { @class = "col_1 tleft text-danger" })
                </div>
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.address, new { id = "route", placeholder = "Address", maxlength = "100", @class = "form-control" })               
                    @Html.ValidationMessageFor(model => model.address, "", new { @class = "col_1 tleft text-danger" })
                </div>
            </div>


        <div class="form-group">
            @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.state, new { id = "administrative_area_level_1", placeholder = "state", maxlength = "100", @class = "form-control" })               
                    @Html.ValidationMessageFor(model => model.state, "", new { @class = "col_1 tleft text-danger" })
                </div>
            </div>
        <div class="form-group">
            @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.country, new { id = "country", placeholder = "country", maxlength = "100", @class = "form-control" })               
                    @Html.ValidationMessageFor(model => model.country, "", new { @class = "col_1 tleft text-danger" })
                </div>
            </div>
        <div class="form-group">
            @Html.LabelFor(model => model.zipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.zipCode, new { id = "postal_code", placeholder = "postal code", maxlength = "6", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.zipCode, "", new { @class = "col_1 tleft text-danger" })
            </div>
        </div>
        @Html.HiddenFor(m => m.latitude)  @Html.HiddenFor(m => m.longitude)


        <div class="form-group">
            @Html.LabelFor(model => model.employerTypeID, "employerTypeID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("employerTypeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.employerTypeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
            }


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        jQuery(document).ready(function () {
            initAutocomplete();
            initialize();
            $('[data-toggle="tooltip"]').tooltip();
        });
      var placeSearch, autocomplete;
      var componentForm = {
          street_number: 'long_name',
          route: 'long_name',
      locality: 'long_name',
      administrative_area_level_1: 'long_name',
      country: 'long_name',
      postal_code: 'short_name'
      };

      function initAutocomplete() {
          debugger
        // Create the autocomplete object, restricting the search to geographical
        // location types.
          autocomplete = new google.maps.places.Autocomplete((document.getElementById('locality')), { autocomplete: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
          debugger
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            debugger
          var addressType = place.address_components[i].types[0];

          if (componentForm[addressType]) {
              debugger
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
            document.getElementById('latitude').value =place.geometry.viewport.b.b;
            document.getElementById('longitude').value =place.geometry.viewport.f.f;

          }
        }

      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
          debugger
          if (navigator.geolocation) {

          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            debugger

            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
</script>



<script type="text/javascript">

        var geocoder;
        var lat, lng;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
        }
        //Get the latitude and the longitude;
        function successFunction(position) {
             lat = position.coords.latitude;
             lng = position.coords.longitude;

        }

        function errorFunction() {
            alert("Geocoder failed");
        }

        function initialize() {
            geocoder = new google.maps.Geocoder();

        }


        function codeLatLng() {

            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        //formatted address

                        //====================================================
                        for (var component in componentForm) {
                            document.getElementById(component).value = '';
                        }

                        // Get each component of the address from the place details
                        // and fill the corresponding field on the form.
                        for (var i = 0; i < results[0].address_components.length; i++) {
                            debugger
                            var addressType = results[0].address_components[i].types[0];

                            if (componentForm[addressType]) {
                                debugger
                                var val = results[0].address_components[i][componentForm[addressType]];
                                document.getElementById(addressType).value = val;
                            }
                        }
                        document.getElementById('latitude').value = results[0].geometry.viewport.b.b;
                        document.getElementById('longitude').value = results[0].geometry.viewport.f.f;
                        //====================================================

                    }
                    else {
                        alert("No results found");
                    }
                } else {
                    alert("Geocoder failed due to: " + status);
                }
            });
        }
</script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDGhqKFgJrrhrXFGFHRzuPJ84hK7GbtAno"></script>

<script type="text/javascript">
        $(document).ready(function () {
            $("form").submit(function (e) {
                debugger
                e.preventDefault();
                Upload();
                if ($(this).valid())
                {
                    $("form").unbind('submit').submit();
                }
            });
        });
///

        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#pic').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#photoA").change(function () {
            readURL(this);
        });

function Upload() {
            debugger
            //Get reference of FileUpload.
            var fileUpload = document.getElementById("photoA");
            if (typeof (fileUpload.files[0]) != "undefined") {
                //Check whether the file is valid Image.
                var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                if (regex.test(fileUpload.value.toLowerCase())) {
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        var image = new Image();
                        image.src = e.target.result;
                        image.onload = function () {
                            debugger
                            var height = this.height;
                            var width = this.width;
                            if (height > 300 || width > 300) {
                                debugger
                                alert("Height and Width must not exceed 100px.");
                                return false;
                            }                           
                        };
                    }
                }
                else {
                    alert("Please select .jpg,.png,.gif");
                    return false;
                }
            }
          
}
</script>







<script type="text/javascript">
        // Initialize your tinyMCE Editor with your preferred options
        tinyMCE.init({
            // General options
            mode: "textareas",
            theme: "modern",
            // Theme options
            theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
            // theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
            // theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
            // theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,

            // Example content CSS (should be your site CSS)
            //content_css: "css/example.css",
        });
</script>
<style>
    div#mceu_12-body.mce-container-body {
        display: none;
    }

    div#mceu_12-body.mce-flow-layout {
        display: none;
    }

    div#mceu_26-body.mce-container-body {
        display: none;
    }

    div#mceu_26-body.mce-flow-layout {
        display: none;
    }

    .mce-branding-powered-by {
        display: none;
    }

    iframe#jobDescription_ifr {
        min-height: 200px;
    }
</style>

