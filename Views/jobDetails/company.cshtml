@model NewLetter.Models.company_

@{
    ViewBag.Title = "company";
    Layout = "~/Views/Shared/_Layout_Employer.cshtml";
}
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/scripts/tinymce/tinymce.min.js"></script>
<!-- Script to wire up your TinyMCE editor -->
<script type="text/javascript">
        // Initialize your tinyMCE Editor with your preferred options
        tinyMCE.init({
            // General options
            mode: "textareas",
            theme: "modern",
            // Theme options
            theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
           // theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
           // theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
           // theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,

            // Example content CSS (should be your site CSS)
            //content_css: "css/example.css",
        });
</script>

<script type="text/javascript">
    function Upload() {
        debugger
                //Get reference of FileUpload.
                var fileUpload = document.getElementById("photoA");

                //Check whether the file is valid Image.
                var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                if (regex.test(fileUpload.value.toLowerCase())) {


                    if (typeof (fileUpload.files) != "undefined") {

                        var reader = new FileReader();

                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {

                            var image = new Image();


                            image.src = e.target.result;


                            image.onload = function () {
                                var height = this.height;
                                var width = this.width;
                                if (height > 100 || width > 100) {
                                    debugger
                                    alert("Height and Width must not exceed 100px.");
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            };

                        }
                    } else {
                        alert("This browser does not support HTML5.");
                        return false;
                    }
                } 
            }

</script>
<style>
    div#mceu_12-body.mce-container-body{display:none;     }
    div#mceu_12-body.mce-flow-layout{display:none;    }

    div#mceu_26-body.mce-container-body{display:none;     }
     div#mceu_26-body.mce-flow-layout{display:none;     }
    .mce-branding-powered-by {display:none;     } 

    div#mceu_41-body.mce-container-body{display:none;     }
    divmceu_41-body.mce-flow-layout{display:none;    }

    div#mceu_55-body.mce-container-body{display:none;     }
     div#mceu_55-body.mce-flow-layout{display:none;     }
    .mce-branding-powered-by {display:none;     }


</style>
   @using (Html.BeginForm("company", "jobDetails", FormMethod.Post, new { id = "msform", enctype = "multipart/form-data", onsubmit = "javascript:return Upload()" }))
   {
       var id = @Model.jobID;
    <fieldset>
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.jobID)
        @Html.HiddenFor(m => m.companyLogo)

        <h2 class="fs-title">Company Details</h2><br />

        <div class="col_1">
            <div class="col_2 ">
                <img height="100" width="100" src='@Model.companyLogo' />
            </div>
            <div class="col_2 tleft">
               Upload client logo 
            </div>
            <div class="col_2">
                <input type="file" id="photoA" name="files" /><br /> <span id="lblError1" style="color: red;"></span>
                </div>
            </div>

        <div class="col_1">           
                 @Html.LabelFor(model => model.companyName, htmlAttributes: new { @class = "col_1 tleft" })      
                @Html.TextBoxFor(model => model.companyName, new { placeholder = "Company Name"})
                @Html.ValidationMessageFor(model => model.companyName, "", new { @class = "text-danger" })
            </div>
        @Html.LabelFor(model => model.aboutCompany, htmlAttributes: new { @class = "col_1 tleft" })


        <div class="col_1">
           
            @Html.TextAreaFor(model => model.aboutCompany, new { placeholder = "Company Name" })
            @Html.ValidationMessageFor(model => model.aboutCompany, "", new { @class = "text-danger" })
        </div>


        <div class="col_1">
            @Html.LabelFor(model => model.companyWebsite, htmlAttributes: new { @class = "col_1 tleft" })
            @Html.TextBoxFor(model => model.companyWebsite, new { placeholder = "Company website url" })
            @Html.ValidationMessageFor(model => model.companyWebsite, "", new { @class = "text-danger" })
        </div>

        <div class="col_1">
            @Html.LabelFor(model => model.contactPerson, htmlAttributes: new { @class = "col_1 tleft" })
            @Html.TextBoxFor(model => model.contactPerson, new { placeholder = "Contact person name" })
            @Html.ValidationMessageFor(model => model.contactPerson, "", new { @class = "text-danger" })
        </div>

        <div class="col_1">
            @Html.LabelFor(model => model.contactNumber, htmlAttributes: new { @class = "col_1 tleft" })
            @Html.TextBoxFor(model => model.contactNumber, new { placeholder = "Contact number" })
            @Html.ValidationMessageFor(model => model.contactNumber, "", new { @class = "text-danger" })
        </div>

        <div class="col_1">
            @Html.LabelFor(model => model.receiveMailAt, htmlAttributes: new { @class = "col_1 tleft" })
            @Html.TextBoxFor(model => model.receiveMailAt, new { placeholder = "Receive responce resume at email id" })
            @Html.ValidationMessageFor(model => model.receiveMailAt, "", new { @class = "text-danger" })
        </div>
        
        @Html.LabelFor(model => model.otherinformation, htmlAttributes: new { @class = "col_1 tleft" })
        <div class="col_1">
          
            @Html.TextAreaFor(model => model.otherinformation, new { placeholder = "Any other information want to see candidates." })
            @Html.ValidationMessageFor(model => model.otherinformation, "", new { @class = "text-danger" })
        </div>

        <div class="fclear"></div>
        <div style="width:90%;float:left">
          @*  @Html.EncodedActionLink("Previous", "Skills", "jobDetails", new { JobID = @id }, new { @class = "action-button previous" })*@
    <input type="button" name="Previous" class="previous action-button" value="Previous" onclick="location.href='@Url.Action("Skills", "jobDetails",null,null)'" />
            <input type="submit" name="Next" class="next action-button" value="Next" id="btnnext" />
        </div>
    </fieldset>
   }