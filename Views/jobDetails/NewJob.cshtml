@model NewLetter.Models.jobDetail
@using NewLetter.Models;
@{
    ViewBag.Title = "New Job";
    Layout = "~/Views/Shared/_Layout_Employer.cshtml";
}

<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/scripts/tinymce/tinymce.min.js"></script>

<script type="text/javascript">
    var jqOld = jQuery.noConflict();
    jqOld(function () {
        debugger
        jqOld("#requiredSkills")
            .bind("keydown", function (event) {
                if (event.keyCode === jqOld.ui.keyCode.TAB &&
                jqOld(this).data("ui-autocomplete").menu.active) {
                    event.preventDefault();
                }
            })
            .autocomplete({
                minLength: 2,
                source: function( request, response ) {
                    jqOld.getJSON("/jobDetails/select_fillSkills", {
                        term: extractLast( request.term )
                    }, response );
                },
                search: function () {
                    // custom minLength
                    var term = extractLast(this.value);
                    if (term.length < 2) {
                        return false;
                    }
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var usersIdVal = jqOld("#UsersId").val();
                    usersIdVal += ", " + ui.item.userId;
                    jqOld("#UsersId").val(usersIdVal)

                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
                }
            });
    });
    function split(val) {
        return val.split(/,\s*/);
    }
    function extractLast(term) {
        return split(term).pop();
    }

</script>


<script type="text/javascript">
                        // Initialize your tinyMCE Editor with your preferred options
                        tinyMCE.init({
                            // General options
                            mode: "textareas",
                            theme: "modern",
                            // Theme options
                            theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
                            // theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
                            // theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
                            // theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
                            theme_advanced_toolbar_location: "top",
                            theme_advanced_toolbar_align: "left",
                            theme_advanced_statusbar_location: "bottom",
                            theme_advanced_resizing: true,

                            // Example content CSS (should be your site CSS)
                            //content_css: "css/example.css",
                        });
</script>
<style>
    div#mceu_13.mce-container,div#mceu_44.mce-container,div#mceu_75.mce-container {
        display: none;
    }

    div#mceu_27-body, div#mceu_58-body,div#mceu_89-body {
        display: none;
    }

  
</style>

<script>
$(document).ready(function(){
    $("#submit_btn").click(function(){
        $(".form-horizontal").addClass("form-validation");
    });
	$("#submit_btn_2").click(function(){
		$(".form-horizontal").addClass("form-validation");
    });
});
</script>

@using (Html.BeginForm("NewJob", "jobDetails", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Post Job</h4>
        
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                <label for="concept" class="col-md-6 col-sm-6 col-xs-12 control-label">Ref ID:</label>
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.TextBoxFor(model => model.advertisementRefID, new { @class = "form-control", disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.advertisementRefID, "", new { @class = "text-danger" })
                </div>
            </div>
            <input type="hidden" name="jobPOstType" value='@ViewBag.isLink' /> 
        </div>

        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.requiredSkills, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.EditorFor(model => model.requiredSkills, new { htmlAttributes = new { @class = "form-control", @placeHolder="ex1, ex2, ex3" } })
                    @Html.ValidationMessageFor(model => model.requiredSkills, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.jobTitle, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.EditorFor(model => model.jobTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.jobTitle, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
<div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.NoOfOpenings, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.EditorFor(model => model.NoOfOpenings, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NoOfOpenings, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
		<div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.workExpMin, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.EditorFor(model => model.workExpMin, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.workExpMin, "", new { @class = "text-danger" })
                </div>
            </div>
         </div>
		 
		 <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group" style="display:flex">
                @Html.LabelFor(model => model.salary, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-2" })
                <div class="col-md-3 col-sm-3 col-xs-5">
                    @Html.EditorFor(model => model.salary, new { htmlAttributes = new { @class = "form-control" } })
                </div> 
                    <div class="col-md-3 col-sm-3 col-xs-5">
                        @{ if (@Model.jobID == 0)
                            {
                                @Html.DropDownListFor(model => model.currency, new SelectList(ViewBag.currency, "currencyID", "currency1"),   new { @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.currency, new SelectList(ViewBag.currency, "currencyID", "currency1"), new { @class = "form-control" })
                            }

                        }                       
                    </div>
                    

                </div>
            </div>
		 
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.TextBoxFor(model => model.city, new { id = "locality", placeholder="", @class = "form-control" })<i class="glyphicon glyphicon-map-marker loc-icon" onclick="return codeLatLng();"><span class="location-tooltip">find current location</span></i>
                    @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
       
        
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.streetNo, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.TextBoxFor(model => model.streetNo, new { id = "street_number", maxlength = "20", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.streetNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.TextBoxFor(m => m.Address, new { id = "route", maxlength = "100", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        

        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @Html.TextBoxFor(model => model.state, new { id = "administrative_area_level_1", maxlength = "100", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
			<div class="col-md-6 col-sm-6 col-xs-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.country, new { id = "country", maxlength = "100", @class = "form-control"})
                            @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-sm-6 col-xs-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.zipCode, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.zipCode, new { id = "postal_code", maxlength = "6", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.zipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(m => m.latitude)  @Html.HiddenFor(m => m.longitude)
               
                <div class="col-md-6 col-sm-6 col-xs-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.salaryVisibleToEmployee, new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.CheckBoxFor(m => m.salaryVisibleToEmployee)
                        </div>
                    </div>
                </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @{ if (@Model.jobID == 0)
                        {
                            @Html.DropDownListFor(model => model.gender, new SelectList(ViewBag.gender, "genderID", "genderName"), "-- Gender --", new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.gender, new SelectList(ViewBag.gender, "genderID", "genderName"), new { @class = "form-control" })
                        }

                    }

                    @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.industryID, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @{ if (@Model.jobID == 0)
                        {
                            @Html.DropDownListFor(model => model.industryID, new SelectList(ViewBag.industryID, "industryID", "industryName"), "-- Industry --", new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.industryID, new SelectList(ViewBag.industryID, "industryID", "industryName"), new { @class = "form-control" })
                        }

                    }

                    @Html.ValidationMessageFor(model => model.industryID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.EducationReq, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @{ if (@Model.jobID == 0)
                        {
                            @Html.DropDownListFor(model => model.EducationReq, new SelectList(ViewBag.EducationReq, "EducationID", "educationName"), "-- Education --", new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.EducationReq, new SelectList(ViewBag.EducationReq, "EducationID", "educationName"), new { @class = "form-control" })
                        }

                    }

                    @Html.ValidationMessageFor(model => model.EducationReq, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">

            <div class="form-group">
                @Html.LabelFor(model => model.EmploymentTypeID, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                <div class="col-md-6 col-sm-6 col-xs-12">
                    @{ if (@Model.jobID == 0)
                        {
                            @Html.DropDownListFor(model => model.EmploymentTypeID, new SelectList(ViewBag.EmploymentTypeID, "EmploymentTypeID", "EmploymentType1"), "-- Employment Type --", new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.EmploymentTypeID, new SelectList(ViewBag.EmploymentTypeID, "EmploymentTypeID", "EmploymentType1"), new { @class = "form-control" })
                        }

                    }

                    @Html.ValidationMessageFor(model => model.EmploymentTypeID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="form-group">
                @Html.LabelFor(model => model.jobDescription, htmlAttributes: new { @class = "control-label col-md-12 label-1 col-sm-12 col-xs-12" })
                <div class="col-md-12 col-sm-12 col-xs-12">
                    @Html.TextAreaFor(model => model.jobDescription, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.jobDescription, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.otherinformation, new { @class = "control-label label-1 col-md-12 col-sm-12 col-xs-12" })
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            @Html.TextAreaFor(model => model.otherinformation, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.otherinformation, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
              
        <div class="col-md-12 padding-none"><hr></div>
        <div class="col-lg-12 col-md-12 col-xs-12 collapsed-padding">
<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
  More +
</a>
</div>
<div class="collapse" id="collapseExample">
  <div class="well more-job">
		<div class="col-md-6 col-sm-6 col-xs-12">
			<div class="col-md-12 col-sm-12 col-xs-12">
				@{ var roleID = BaseUtil.RoleID();
					if (roleID == "4" || roleID == "1")
					{
						<div class="form-group">
							@Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
							<div class="col-md-6 col-sm-6 col-xs-12">
								@Html.DropDownListFor(model => model.CompanyName, new SelectList(ViewBag.ComapnyDetails, "companyID", "companyName"), new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
							  
							</div>
						</div>

					}
					else
					{
						<div class="form-group">
							@Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
							<div class="col-md-6 col-sm-6 col-xs-12">
								@Html.TextBoxFor(model => model.CompanyName, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
							</div>
						</div>
					}

				}
			</div>
			<div class="col-md-12 col-sm-12 col-xs-12">
				<div class="form-group">
					@Html.LabelFor(model => model.jobContactPersonName, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
					<div class="col-md-6 col-sm-6 col-xs-12">
						@Html.EditorFor(model => model.jobContactPersonName, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.jobContactPersonName, "", new { @class = "text-danger" })
					</div>
				</div>
			</div>
			<div class="col-md-12 col-sm-12 col-xs-12">
				<div class="form-group">
					@Html.LabelFor(model => model.jobContactPersonMobile, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
					<div class="col-md-6 col-sm-6 col-xs-12">
						@Html.EditorFor(model => model.jobContactPersonMobile, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.jobContactPersonMobile, "", new { @class = "text-danger" })
					</div>
				</div>
			</div>
			<div class="col-md-12 col-sm-12 col-xs-12">

				<div class="form-group">
					@Html.LabelFor(model => model.jobContactPersonEmail, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
					<div class="col-md-6 col-sm-6 col-xs-12">
						@Html.EditorFor(model => model.jobContactPersonEmail, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.jobContactPersonEmail, "", new { @class = "text-danger" })
					</div>
				</div>
			</div>
			<div class="col-md-12 col-sm-12 col-xs-12">
				<div class="form-group form-group2">
					@Html.LabelFor(model => model.CompanyWebsite, htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
					<div class="col-md-6 col-sm-6 col-xs-12">
						@Html.TextBoxFor(model => model.CompanyWebsite, new { placeholder = "Company website url", @class = "form-control" })
						@Html.ValidationMessageFor(model => model.CompanyWebsite, "", new { @class = "text-danger" })
					</div>
				</div>
			</div>
		</div>
		<div class="col-md-6 col-sm-6 col-xs-12">
			<div class="form-group">
				<div class="col-md-12 col-sm-12 col-xs-12">
					<div class="col-md-4 col-sm-4 col-xs-12 company-logo-img padding-none text-center">
						@Html.ValidationSummary(true, "", new { @class = "text-danger" })
						@{ if (Model.CompanyLogo == "" || Model.CompanyLogo == null)
							{
								<img id="pic" src='~/Logo/EmptyLogo.jpg' alt="company logo" width="100px" height="100px" />
							}
							else
							{
								<img id="pic" src= 'https://trackback.net/wp-content/uploads/2015/02/Dummy-profile-picture.png' alt="company logo" width="100px" height="100px" />
							}
						}
					</div>
					<div class="col-md-8 col-sm-8 col-xs-12 company-logo-img padding-none">
						<input type="file" id="photoA" name="files" /><br /> <span id="lblError1" style="color: red;"></span>


						@Html.HiddenFor(model => model.advertisementRefID)

						@Html.HiddenFor(model => model.CompanyLogo) @Html.HiddenFor(model => model.jobID)
					</div>
				</div>
			</div>
		</div>
		
		<div class="col-md-12 col-sm-12 col-xs-12 company-desc-box">

			<div class="form-group">
				@Html.LabelFor(model => model.CompanyDescription, htmlAttributes: new { @class = "control-label col-md-12 col-sm-12 label-1 col-xs-12" })
				<div class="col-md-12 col-sm-12 col-xs-12">
					@Html.TextAreaFor(model => model.CompanyDescription, new { placeholder = "Company Name"})
					@Html.ValidationMessageFor(model => model.CompanyDescription, "", new { @class = "text-danger" })
				</div>

				</div>
			</div>
  </div>
</div>
               
                
             
                        @Html.HiddenFor(model => model.compeletPosted)
                        <div class="form-group ">
                            <div class="col-md-offset-2 col-md-10 form-group-1">
                                <input id="submit_btn" type="submit" value="Save & Generate Link" class="btn btn-default" onclick="return compelepost();" />
                                <input id="submit_btn_2" type="submit" value="Save For Later" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
 }
                    <script>
                        function compelepost() {
                            jqOld('#compeletPosted').val('true');
                        }
                    </script>
<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        jQuery(document).ready(function () {
            initAutocomplete();
            initialize();
            jqOld('[data-toggle="tooltip"]').tooltip();
        });
      var placeSearch, autocomplete;
      var componentForm = {
          street_number: 'long_name',
          route: 'long_name',
      locality: 'long_name',
      administrative_area_level_1: 'long_name',
      country: 'long_name',
      postal_code: 'short_name'
      };

      function initAutocomplete() {
          debugger
        // Create the autocomplete object, restricting the search to geographical
        // location types.
          autocomplete = new google.maps.places.Autocomplete((document.getElementById('locality')), { autocomplete: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
          debugger
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            debugger
          var addressType = place.address_components[i].types[0];

          if (componentForm[addressType]) {
              debugger
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
            document.getElementById('latitude').value =place.geometry.viewport.b.b;
            document.getElementById('longitude').value =place.geometry.viewport.f.f;

          }
        }

      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
          debugger
          if (navigator.geolocation) {

          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            debugger

            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
</script>

<script>
    jqOld(function () {
        jqOld("#CompanyName").change(function () {
            debugger
            var CompanyID = jqOld('option:selected', this).val();
            var s = jqOld('option:selected', this).text();
          
            jqOld.ajax({               
               // dataType: 'json',
                url: '@Url.Action("companyDetails_", "jobDetails")',
                data: {'CompanyID': CompanyID },               
                success: function (data) {
                    debugger
                    jqOld('#jobContactPersonName').val(data.jobContactPersonName);
                    jqOld('#jobContactPersonMobile').val(data.jobContactPersonMobile);
                    jqOld('#jobContactPersonEmail').val(data.jobContactEmail);
                    jqOld('#CompanyDescription').val(data.CompanyDescription); // img id="pic"
                    jqOld('#CompanyWebsite').val(data.CompanyWebsite);                  
                   

                    var $body = $(tinymce.activeEditor.getBody());
                   
                    $body[0].innerHTML = '';
                    $body.append(data.CompanyDescription);
                   // jqOld('#tinymce').attr("innerHTML",data.CompanyDescription);
                    $("#pic").attr("src", data.logo);
                }
            });
        });
    });
</script>

<script type="text/javascript">

        var geocoder;
        var lat, lng;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
        }
        //Get the latitude and the longitude;
        function successFunction(position) {
             lat = position.coords.latitude;
             lng = position.coords.longitude;

        }

        function errorFunction() {
            alert("Geocoder failed");
        }

        function initialize() {
            geocoder = new google.maps.Geocoder();

        }


        function codeLatLng() {

            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        //formatted address

                        //====================================================
                        for (var component in componentForm) {
                            document.getElementById(component).value = '';
                        }

                        // Get each component of the address from the place details
                        // and fill the corresponding field on the form.
                        for (var i = 0; i < results[0].address_components.length; i++) {
                            debugger
                            var addressType = results[0].address_components[i].types[0];

                            if (componentForm[addressType]) {
                                debugger
                                var val = results[0].address_components[i][componentForm[addressType]];
                                document.getElementById(addressType).value = val;
                            }
                        }
                        document.getElementById('latitude').value = results[0].geometry.viewport.b.b;
                        document.getElementById('longitude').value = results[0].geometry.viewport.f.f;
                        //====================================================

                    }
                    else {
                        alert("No results found");
                    }
                } else {
                    alert("Geocoder failed due to: " + status);
                }
            });
        }
</script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDGhqKFgJrrhrXFGFHRzuPJ84hK7GbtAno"></script>
              
              <script>
    function readURL(input) {
        debugger
        if (input.files && input.files[0]) {
            //Get reference of FileUpload.
            var fileUpload = document.getElementById("photoA");
            if (fileUpload.value.length > 0) {
                //Check whether the file is valid Image.
                var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                if (regex.test(fileUpload.value.toLowerCase())) {
                    var reader = new FileReader();
                    var s = fileUpload.files[0];
                    reader.readAsDataURL(s);
                    reader.onload = function (e) {
                        var image = new Image();
                        image.src = e.target.result;
                        image.onload = function () {
                            debugger
                            var height = this.height;
                            var width = this.width;
                            if (height > 100 || width > 100) {
                                debugger

                                bootbox.alert({
                                    title: "Alert !",
                                    message: 'Height and Width must not exceed 100px.'
                                });
                                return false;
                            }
                            else {

                                var reader1 = new FileReader();

                                reader1.onload = function (e) {
                                    $('#pic').attr('src', e.target.result);
                                }

                                reader1.readAsDataURL(input.files[0]);
                            }
                        };
                    }
                }
                else {

                    bootbox.alert({
                        title: "Alert !",
                        message: 'Please select .jpg,.png,.gif'
                    });
                    return false;
                }
            }

        }
    }

    $("#photoA").change(function () {
        readURL(this);
    });
</script>