@model NewLetter.Models.HiredCandidate
<div class="modal-dialog">
    <!-- Modal content-->
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">Comments</h4>
        </div>
        <div class="modal-body" style="overflow:auto">
            @using (Html.BeginForm("HiredCandidatesComment", "Employer", FormMethod.Post, new { id = "CandidateHired" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.HiddenFor(model => model.jobID)
                    @Html.HiddenFor(model => model.qenID)

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.ExpectedSalaryMonthly, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ExpectedSalaryMonthly, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ExpectedSalaryMonthly, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    

                    <div class="form-group">
                        @Html.LabelFor(model => model.ExpectedSalaryGross, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ExpectedSalaryGross, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ExpectedSalaryGross, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.joinningDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">						
                            @Html.TextBoxFor(model => model.joinningDate,"{0:MM/dd/yyyy}", new {@class = "datepicker"})
                            @Html.ValidationMessageFor(model => model.joinningDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Designtion, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Designtion, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Designtion, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SpecialComment, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SpecialComment, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SpecialComment, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="button" value="Create" class="btn btn-default" onclick="return hiredCandidate();" />
                        </div>
                    </div>
                </div>
            }

        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

        </div>
    </div>

</div>
<script>
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    }
    function hiredCandidate()
    {
        debugger
        var form = $("#CandidateHired").serializeObject();
        debugger
        $.ajax({
            url: 'HiredCandidatesComment',
            type: 'POST',
            data: form,
            success: function (data) {
                debugger
                if (data == "ok") {
                    bootbox.alert({
                        title: 'Alert Success  !',
                        message: 'Record updated and mail send to candidate.'
                    });
                }
            }
        });
    }
</script>

<script type="text/javascript">
    var jqOld = jQuery.noConflict();
    jqOld(document).ready(function () {
        jqOld(".datepicker").datepicker();
    });
</script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.js"></script>  

	<script type="text/javascript">
    var jold = jQuery.noConflict();
    jold(function () {
        jold.validator.addMethod('date',
        function (value, element) {
            if (this.optional(element)) {
                return true;
            }
            var ok = true;
            try {
                jold.datepicker.parseDate('dd/mm/yy', value);
            }
            catch (err) {
                ok = false;
            }
            return ok;
        });
        jold(".datepicker").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
    });
	</script>